{'dependent': 'kerasrl', 'repo': '/a3lab/morphoses', 'language': 'Python', 'description': 'Art project involving robotic ball', 'readme': '# Morphosis Project Code and Resources\nThis repository features scripts and resources for the ongoing Morphosis project.\n\n## Subfolders\n\n### Python\n\nContains python scripts for interacting with a Unity simulation and for conducting machine learning\nexperiments.\n\n### Unity\n\nContains the Unity project for generating simulated data.\n\n# Arduino specific instructions\n\n## Install tools\n\n- Install OSC tools: `sudo apt-get install pyliblo-utils`\n- Install latest version of [Arduino](https://www.arduino.cc/en/Main/Software)\n  - Install library [CNMAT OSC](https://github.com/CNMAT/OSC)\n  - Install library [Sparkfun MPU9250](http://www.arduinolibraries.info/libraries/sparkfun-mpu-9250)\n  - Install library [UM7](https://github.com/sofian/UM7-Arduino)\n- Follow instructions to install [ESP8266 Thing Addon to Arduino](https://learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide/installing-the-esp8266-arduino-addon)\n- Install latest version of [Processing](https://processing.org/download/)\n  - Install library [OSCP5](http://www.sojamo.de/libraries/oscP5/)\n\n## Connect to network\n\n- Connect HOST to local wifi network.\n- Use `ifconfig` to check the IP address of HOST computer.\n\n## Test OSC communication (optional)\n\n- If you can, use another computer (TEST) connected to the same network.\n- On HOST computer run: `dump_osc 12345`\n- On TEST computer run: `send_osc osc.udp://xxx.xxx.xxx.xxx:12345/ /hello`\n- You should see `/hello ,` on the HOST\n\n## Update Wifi configuration on main ESP8266 board\n\n- From the root of the project: `cd MorphosesMainBoard`\n- Copy config file: `cp MorphosesConfig.h.example MorphosesConfig.h`\n- Open MorphosesMainBoard in Arduino and edit MorphosesConfig.h (see below)\n- Upload to board\n\nSetup wifi AP here:\n\n```\nconst char *ssid = "ball"; // Pointer to the SSID (max 63 char)\nconst char *password = "roller"; // for WPA2 min 8 char, for open use NULL\n```\n\nSetup IP address of HOST here:\n\n```\n#define DEST_IP_0 192\n#define DEST_IP_1 168\n#define DEST_IP_2 0\n#define DEST_IP_3 100\n```\n\n# Tech notes\n\n## Relay pin\n\nThe relay pin needs to be put to HIGH in order to cut the current to the motors. This was done because when the ESP8266 is launched, there is a "spike" on pin 0 which would have triggered the motor initialization process (where it goes from side to side once). However, there is a way to fix it, by reprogramming the motor-control arduinos to wait (ie. adding a delay() in their setup()) so that they are not affected by the spike.\n\n## Programming of microcontrollers\n\nThere are two kinds of microcontrollers on the robot:\n * ESP8266 Thing\n * Arduino Mini\n\nBoth types need to be programmed using a 3.3V FTDI cable. *Do NOT use a 5V FTDI cable/interface because the ESP8266 runs at 3.3V and you could break it.*\n\n### ESP8266 Thing\n\nStep 1: Connect the FTDI cable to the right input pins.\n\n```\n          |\nGREEN --- | DTR\nYELLOW -- | TX0\nORANGE -- | RX1\nRED ----- | 3V3\nBROWN --- | NC\nBLACK --- | GND\n          |\n```\n\nStep 2: Connect the DTR jumper.\n\nStep 3: Select Boards > ESP8266 Thing and upload sketch.\n\nIf you have trouble with the ESP8266 please see [Troubleshooting the ESP8266](https://morphoseis.wordpress.com/2017/08/09/troubleshooting-the-esp8266/).\n\n### Arduino Mini\n\nStep 1: Connect the FTDI cable to the right input pins.\n\n```\n          -----------\nGREEN --- | DTR\nYELLOW -- | TX0\nORANGE -- | RX1\nRED ----- | VCC\nBROWN --- | GND\nBLACK --- | GND\n          -----------\n```\n\nStep 2: Select Boards > *Arduino Nano* and Processor > *ATmega328P (Old Bootloader)*\n\n*Do NOT select Boards > Arduino Mini as it seems to be causing problems of the kind "avrdude: stk500_getsync() attempt ... of 10: not in sync: resp=0x0d" at upload.*\n\n# Mac installation\n\nBelow are specific instructions to follow when installing the project on MacOS 10.11.6 (as the project was initially developed on Ubuntu).\n\n## Unity\n\nResolve C# compatibility issue:\n\n- Install Unity 2019.1.1f1 Personal\n- Go to `Edit > Project Settings > Player > Other Settings > Configuration`\n- Set Scripting Runtime Version to `.NET 4.x equivalent`\n\n## Python\n\nResolve package installation issue:\n\n- From the root of the project: `cd ./Python`\n- Install Python virtual environment: `python3 -m venv Python`\n- Launch environment: `source ./bin/activate`\n- In a text editor, open `./Python/requirements.txt`\n- Delete line `pkg-resources==0.0.0`\n- Install requirements: `pip install -r requirements.txt`\n\nResolve TensorFlow issue with AVX instruction sets:\n\n- From the root of the project: `cd ./Python`\n- Launch Python virtual environment: `source ./bin/activate`\n- Install TensorFlow 1.5: `pip install tensorflow==1.5`\n', 'contents': "['.gitignore', '.idea', 'Arduino', 'Morphoses.touchosc', 'Processing', 'Python', 'README.md', 'Tests', 'Unity', 'mp_rollerball.sch', 'rollerball.pd']", 'stars': 0, 'watchers': 0, 'forks': 2, 'deprepos': 0, 'deppacks': 0}