{'dependent': 'kerasrl', 'repo': '/driemworks/agatha', 'language': 'Python', 'description': 'Stock market prediction using Keras', 'readme': '# Agatha\n![license](https://img.shields.io/hexpm/l/plug.svg) [![PyPI version](https://badge.fury.io/py/agatha.svg)](https://badge.fury.io/py/agatha)\n\n\nAgatha is a tool to help you predict future prices (open, close) or daily volume for any given stock ticker.\n\n<p align="center">\n<img src="https://github.com/driemworks/agatha/blob/master/resources/images/full.PNG?raw=true" alt="full" width="400" height="400">|<img src="https://github.com/driemworks/agatha/blob/master/resources/images/prediction.PNG?raw=true" alt="full" width="400" height="400">\n</p>\n\n## Should I have faith in the predictions?\nProbably not. \n\n## How it works\nAgatha uses an LSTM network to predict close prices for a user-specified number of days in the future. The training data is downloaded via [Alpha Vantage](https://www.alphavantage.co/).\n\n## Requirements\n- python 3.5 or higher\n\n## Installation\nThere are two ways to install agatha.\n\n### Install using pip\nThe easiest way to install agatha is via pip:\n```bash\npip install agatha\n```\nNote: keep in mind that this requires python 3.5 or higher.\nAnother Note: If you want the latest version build from sources.\n\n### Build form sources\nClone this repository. Inside the Agatha folder, create the agatha package using\n``` python\npython setup.py sdist\n```\nThen install using pip. \n``` python\npip install dist/*\n```\n\nIf you use anaconda, you can load the conda environment using the environment.yml file in `resources/conda`\nand running ```conda env create -f environment.yml```\n\n## Usage\nFirst, import agatha\'s functions \n```python\nfrom agatha import getOrTrainModel, predictFuture\n```\n\nThen get an API key from Alpha Vantage. \nTo train a model for a  particular ticker, use\n``` python\nmodel = getOrTrainModel(alpha_vantage_api_key, ticker, attribute, alphavantage_data,\n\t\t\t\t\t\tmodel_data, weights_data, epochs=epochs, look_back=look_back)\n```\nwhere \n- ticker is the stock ticker\n- attribute is the stock attribute to predict (open, close, volume),\n- alphavantage data is downloaded as a csv and then pickled (saved as .pkl)\n- the model_data is saved as json\n- the weights file is saved as .h5\n\nPredictions for future close prices for a stock can have output type as `json` or `plot` (pyplot, as shown in graphs above) \n``` python\nprediction_output = predictFuture(model, num_days_to_predict, ouptut_type)\n```\n\nExample:\n\n```python\nmodel = getOrTrainModel(\'adsfadsfasdf\', \'GE\', \'GE.pkl\', \'open\', \'model.json\', \'weights.h5\')\nprediction_output = predictFuture(model, 2, \'json\')\n```\n\nExample output JSON from `predictFuture`:\n```\n{\n   "ticker":"GE",\n   "column":"open",\n   "predictions":[\n      {\n         "day":"1",\n         "price":"8.009521"\n      },\n      {\n         "day":"2",\n         "price":"8.117293"\n      }\n}\n```\nRefer to [app.py](https://github.com/driemworks/agatha/blob/master/examples/app.py), for a working example.\n\n## Future Enhancements\n- Allow other sources of historical data (including cryptocurrencies)\n- Any suggestions?\n  \n', 'contents': "['.idea', 'LICENSE', 'MANIFEST', 'agatha', 'dist', 'examples', 'readme.md', 'requirements.txt', 'resources', 'setup.cfg', 'setup.py']", 'stars': 27, 'watchers': 27, 'forks': 7, 'deprepos': '0', 'deppacks': '0'}