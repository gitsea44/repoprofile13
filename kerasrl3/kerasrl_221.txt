{'dependent': 'kerasrl', 'repo': '/miroblog/upbit_api_collection', 'language': 'Python', 'description': 'simple, easy to use interface for upbit rest-api', 'readme': '# Upbit API Collections\n\nThis repo contains api for upbit exchange. Creates appropriate request headers ...    \n\n### Prerequisites\n\ncommon library such as numpy, pandas matplotlib\n\n```python\npip install -r requirements.txt\n```\n\n### cralwer_server.py :   \n  saves recent ohlcv(open-high-low-close-volume) candle as pandas dataframe  \n [JuypterNotebook- cralwer_server](https://github.com/miroblog/upbit_api_collection/blob/master/crawler_server_example.ipynb)  \n \n### upbit_trader_api.py : \n  handles api request (create order/ check order status/ cancel order/ get order book/ get ohlcv candle ...)  \n[JuypterNotebook- upbit_trader_api](https://github.com/miroblog/upbit_api_collection/blob/master/example_upbit_trader_api.ipynb)  \n\n\n## Getting Started\n\n```\n## usage for cralwer_server\n\n$ python cralwer_server.py -t "KRW-BTC" -p "./data/" -m 5 -c 400 -l 15000\n\n\nusage: crawler_server.py [-h] [-t TARGET] [-p PATH] [-m MINUTE] [-c COUNT]\n                         [-l LENGTH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TARGET, --target TARGET\n                        provide coin name e.g. KRW-BTC\n  -p PATH, --path PATH  designate where to save ohlcv data\n  -m MINUTE, --minute MINUTE\n                        data frequency min provided e.g. 1, 5, 15, 30, 60, 240\n  -c COUNT, --count COUNT\n                        provide count e.g. 400\n  -l LENGTH, --length LENGTH\n                        provide total length e.g. 15000\n\n```\n```python\nohlcv[\'close\'].plot()\nplot.show()\n```\n![close](https://github.com/miroblog/upbit_api_collection/blob/master/png/close.png)\n\n\n```python\nshow_limit = 20 # plot latest 20 candles\ncandlestick_ohlc(ax1, df_ohlc.values[-show_limit:], width=0.001, colorup=\'g\')\nplt.show()\n```\n![candle](https://github.com/miroblog/upbit_api_collection/blob/master/png/ohlc.png)\n\n```\n## usage for upbit_trader_api\n\n# set up api keys\nimport upbit_trader_api\nupbit_trader_api.ACCESS_KEY = ""\nupbit_trader_api.SECRET_KEY = ""\n\n# create buy, sell order\nuuid = upbit_trader_api.create_order(market="KRW-BTC", side=\'bid\', price=price, volume=volume)\nuuid = upbit_trader_api.create_order(market="KRW-BTC", side=\'ask\', price=price, volume=volume)\n# cancel order\nupbit_trader_api.cancel_order(uuid)\n# check order status\nupbit_trader_api.get_order_info(uuid)\n\n```\n\n## Authors\n\n* **Lee Hankyol** - *Initial work* - [Upbit_API_COLLECTION](https://github.com/miroblog/upbit_api_collection)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n', 'contents': "['.gitattributes', '.idea', '.ipynb_checkpoints', 'Readme.md', '__pycache__', 'cmd_tab.json', 'crawler_server.py', 'crawler_server_example.ipynb', 'ctrl_c.json', 'ctrl_v.json', 'data', 'example_upbit_trader_api.ipynb', 'mpl_finance.py', 'png', 'requirements.txt', 'upbit_trader_api.py']", 'stars': 2, 'watchers': 2, 'forks': 1, 'deprepos': 0, 'deppacks': 0}