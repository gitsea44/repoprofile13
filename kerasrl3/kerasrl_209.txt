{'dependent': 'kerasrl', 'repo': '/Mosfreds/karl-heinz', 'language': 'Python', 'description': None, 'readme': "vindinium-python-client\n===================\n\nPython/Curses user interface for the Vindinium A.I contest.\nhttp://www.vindinium.org/\n\n\n1 - Licence:\n------------\n    This software is published and copyrighted by Doug Le Tough\n    (doug.letough@free.fr) and released under the W.T.F.P.L.\n\n    It was initially based upon the Vindium python starter available here :\n    https://github.com/ornicar/vindinium-starter-python\n\n    A copy of the W.T.F.P.L is available in the LICENCE.txt file\n    that should accompany this source code.\n\n    For further information about the WTFPL please\n    visit  http://www.wtfpl.net/\n\n\n2 - Content:\n------------\n\n    a - ai.py\n        The random A.I. This is where to put your A.I code\n\n    b - bot.py\n        The bot object source code. Collects data processed.\n\n    c - CHANGELOG.TXT\n        The changelog, you may read it.\n\n    d - client.py\n        The client source code used to connect to game server\n\n    e - vindinium_curses_ui.png\n        A screenshots of the running U.I\n\n    f - vindinium_curses_ui_menu.png\n        Some screenshots of the setup menus\n\n    g - game.py\n        Source code used to process data sent by the server\n\n    h - LICENCE.TXT\n        A copy of the W.T.F.P.L\n\n    i - README.md\n        This file\n\n    j - TODO.TXT\n        The famous TODO list\n\n    k - ui.py\n        The curses U.I. source code\n\n\n3 - Goal:\n-----------------\n\n    The main goal of this project is to provide a solution to people\n    running their bots on a server and who'd like to view their\n    bots' activity in real-time without using the http connection\n    graciously provided by Vindinium.\n\n    This U.I to Vindinium is usable in a terminal and using an ssh\n    connection also permits reducing network latency.\n\n    It also provides a convenient way to save to and load configuration\n    and games from file allowing game later playback.\n\n\n4 - Prerequities:\n-----------------\n\n    a - An Unix-like system (Linux/BSD/MacOSX/...)\n        Due to some limitations of the underlying operating system,\n        Windows is not not supported by this program.\n        The work needed to make it work with Windows is not so\n        hard but it is not a top priority for now.\n        However, in a near future, this program should run over Windows.\n\n    b - A terminal or a terminal emulator such xterm able to display\n        colors and supports least a 48 lines X 150 columns resolution.\n        This software will work nicely with terminal multiplexers like\n        screen or tmux\n\n    c - Python3 (was tested with 3.6)\n\n    d - The python-requests modules\n\n    e - The python-curses modules\n\n\n5 - How to make it work:\n------------------------\n\n    The ai.py file contains the code of your bot.\n    With the bot.py file, it's merely the only file you'll need to play with.\n\n    Many comments are dissiminated within the source code.\n    They shall help you to understand how to plug your A.I to the U.I.\n\n    In order to make it work, you simply need to launch the client with\n    one of the following commands :\n\n        a - python client.py <key> <[training|arena]> <number-of-games-to-play> [server-url]\n\n            In this case the starting setup menu will not be shown\n\n            Examples:\n\n            python client.py mySecretKey arena 10\n            python client.py mySecretKey training 10 http://localhost:9000\n\n        b - python client.py\n\n            In this case the setup menu will be displayed and will ask you\n            some basic infos to get connected to the server.\n\n\n    You may post your question about this project to doug.letough@free.fr\n    or to the #vindinium freenode.net IRC channel. The latter may be a\n    faster way to obtain answers but an email should always be privileged\n    as it guaranties an first-hand answer.\n\n\n6 - Note :\n----------\n\n    The code provided here do NOT contains any AI or path-finding code\n    but only a random AI (hey, This YOUR job to put it up).\n\n    However it would run fine as is but would only win by mistake :)\n\n\n\n\n![Curses U.I running a game](screenshots/vindinium_curses_ui.png)\n![Main menu](screenshots/01.png)\n![Game mode selection](screenshots/02.png)\n![Number of games input (Arena mode)](screenshots/03.png)\n![Server URL input](screenshots/04.png)\n![Player key input](screenshots/05.png)\n![Save config screen](screenshots/06.png)\n![Play game screen](screenshots/07.png)\n![Number of turns input (Training mode)](screenshots/08.png)\n![Game map selection (Training mode)](screenshots/09.png)\n![Game file path input](screenshots/10.png)\n![Game file URL input](screenshots/11.png)\n", 'contents': "['.gitignore', 'CHANGELOG.TXT', 'LICENCE.TXT', 'README.md', 'TODO.TXT', 'ai.py', 'bot.py', 'client.py', 'game.py', 'game_library', 'gamestats.py', 'ml-playground.py', 'requirements.txt', 'screenshots', 'setup.py', 'ui.py', 'utils']", 'stars': 0, 'watchers': 0, 'forks': 0, 'deprepos': 0, 'deppacks': 0}