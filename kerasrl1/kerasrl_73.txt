{'dependent': 'kerasrl', 'repo': '/Huizerd/lunarlander', 'language': 'Python', 'description': "Implementation of OpenAI Gym's LunarLander-v2 for the AE4311 Advanced Flight Control course at TU Delft.", 'readme': "# LunarLander-v2 for AE4311\n[![HitCount](http://hits.dwyl.io/Huizerd/lunarlander.svg)](http://hits.dwyl.io/Huizerd/lunarlander)\n\nImplementation of OpenAI Gym's [LunarLander-v2](https://gym.openai.com/envs/LunarLander-v2/) for the AE4311 Advanced Flight Control course at TU Delft.\n\nBefore training            |  After training (Sarsa/Q-learning)    |  After training (double DQN)   |\n:-------------------------:|:-------------------------:|:----------------------------------:|\n![](readme_files/before.gif)  |  ![](readme_files/after_qlearn.gif) | ![](readme_files/after_doubleDQN.gif) \n\n## Installation\nTested on Ubuntu 18.04, with Python 3.6.5. Ensure all Ubuntu repositories are enabled (can be done with `sudo add-apt-repository universe restricted multiverse`).\n```bash\n$ sudo apt install -y python3-numpy python3-dev cmake zlib1g-dev libjpeg-dev xvfb xorg-dev python3-opengl libboost-all-dev libsdl2-dev swig\n$ git clone https://github.com/Huizerd/lunarlander.git\n$ cd lunarlander\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n```\n\n## Running the simulator\nTo run the default configuration:\n```bash\n$ python -m lander\n```\nOf course, other configurations can be specified. See `config/config.yaml.default` for the default values.\nAn example configuration, saved under `config/config.yaml`, would be:\n```yaml\n# Environment and agent\nENV_ID: 'LunarLander-v2'\nENV_SEED: 0\nAGENT: 'doubledqn'\n\n# Data locations\n# NOTE: setting RECORD_DIR to an existing directory will overwrite!\n# NOTE: CHECKPOINT_DIR can be anything when CONTINUE is False\nRECORD_DIR: 'record/doubledqn/'\nCHECKPOINT_DIR: ''\n\n# Run config\nEPISODES: 1000\nSAVE_EVERY: 100\nSTATE_BINS: [5, 5, 5, 5, 5, 5, 2, 2]  # per state dimension\nSTATE_BOUNDS: [[-1.0, 1.0], [-1.0, 1.0], [-1.0, 1.0], [-1.0, 1.0],\n               [-1.0, 1.0], [-1.0, 1.0], [-1.0, 1.0], [-1.0, 1.0]]  # per state dimension\nVERBOSE: 1  # 0: nothing, 1: plots and saved videos, 2: every episode\nCONTINUE: False\n\n# Learning parameters\n# Format: start value, end value, # of episodes, decay factor\n# NOTE: linear slope between start and end, then exponential decay\n# NOTE: use 0 as # of episodes to do only exponential decay\nE_GREEDY: [1.0, 0.05, 1e5, 0.97]\nLEARNING_RATE: [5e-5, 5e-5, 0, 1]\nDISCOUNT_RATE: 0.99\n\n# Network parameters\nL2_REG: 1e-6\nUPDATE_EVERY: 100\nREPLAY_MEMORY_SIZE: 1e6\nBATCH_SIZE: 64\nLAYER_SIZES: [512, 512, 512]\n```\n\nWhich would then be called like this:\n```bash\n$ python -m lander -c config/config.yaml\n```\n\n## Agents\nAs of now, the available agents are:\n- Random\n- Sarsa\n- Q-learning\n- Double deep Q-learning\n\n## Environment\nAdditional information about the environment can be found on the environment's [webpage](https://gym.openai.com/envs/LunarLander-v2/), or in the [source code](https://github.com/openai/gym/blob/master/gym/envs/box2d/lunar_lander.py).\n\n### Actions\nThere are four discrete actions the lander can take:\n- `0`: Do nothing\n- `1`: Fire left thruster\n- `2`: Fire main thruster\n- `3`: Fire right thruster\n\n### State\nThe state vector consists of eight variables (in this order) between -1 and 1:\n- Lander position in x\n- Lander position in y\n- Lander velocity in x\n- Lander velocity in y\n- Lander angle\n- Lander angular velocity\n- Contact left landing leg\n- Contact right landing leg\n\nTo make the learning problem (more) tractable, the state can be discretized into a certain number of bins.\n\n## Grid search\nA grid search over different hyperparameter combinations can be performed using `grid_search.py`:\n\n```bash\n$ python lander/grid_search.py\n```\n\nwhich uses the default configuration and grid. Custom variants can be called like this:\n\n```bash\n$ python lander/grid_search.py -c config/config.yaml -g grid/grid_search.yaml\n```\n\nThe goal of performing a grid search is twofold: finding the best hyperparameters for the problem,\nand performing a sensitvity analysis of them.\n", 'contents': "['.gitattributes', '.gitignore', 'LICENSE', 'README.md', 'config', 'grid', 'lander', 'readme_files', 'requirements.txt', 'run_grid_search.sh']", 'stars': 0, 'watchers': 0, 'forks': 2, 'deprepos': 0, 'deppacks': 0}