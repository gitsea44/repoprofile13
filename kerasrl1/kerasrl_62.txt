{'dependent': 'kerasrl', 'repo': '/YoesYwema/wildfire_control', 'language': 'Python', 'description': 'Control of wildfires by learning from demonstration', 'readme': "# Wildfire-Control-Python\r\nThe custom environment simulates the spread of fire from a 2D, birds-eye-view perspective. \r\nTo contain the fire, the agent (a bulldozer) should learn to dig a road around the fire, enclosing it completely. \r\nBy doing so, we take away the fuel that the fire needs to spread further.\\\r\nFollow these instructions with python 3.6.\r\n\r\n## Install dependencies:\r\n`pip install -r requirements.txt`\r\n\r\n## Create A* files:\r\n`make -C pyastar/`\r\n\r\n## Let the algorithm learn and then let it play:\r\n`python main.py -r -tr {amount_of_episodes_to_train} -v {amount_of_episodes_to_validate} -te {amount_of_test_episodes} e-{environment} -t {CNN} -n {name}`\r\n\r\nThe command above starts the simulation. The terms between brackets{} can be filled in to create your customized\r\nforest fire control system. There are 4 possible environments 'forest', 'forest_river', 'forest_houses' or \r\n'forest_houses_river'. It will train with the amount of episodes behind -tr, it will evaluate during training based\r\non the amount of -v episodes. Then finally it will be used to perform in new test episodes (of which no feedback is \r\navailable). From this test episodes you'll receive information about how many times the agent died, isolated the fire\r\nand how much percent of the forest is kept healthy (not burned or digged)\r\n\r\nExample, here you play 50 episodes to create training memories, 20 episodes to create validation memories. For the model you've created test it 100 times on random new episodes\r\n\r\n`python main.py -r -tr 50 -v 20 -te 100 e- forest_houses -t CNN -n example` \r\n\r\nWith the CNN_EXTRA mode you can compare a model trained with the data that comes from the CNN mode plus extra amount of episodes that you specify in this command\r\n\r\n`python main.py -r -tr {amount_of_episodes_to_train} -v {amount_of_episodes_to_validate} -te {amount_of_test_runs} e-{environment} -t {CNN_EXTRA} -n {name}`\r\n\r\nWith the HI_CNN mode you can compare a model with the data that comes from an earlier trained CNN plus extra amount of episodes from fires the model cannot contain already\r\n\r\n`python main.py -r -tr {amount_of_episodes_to_train} -v {amount_of_episodes_to_validate} -te {amount_of_test_runs} e-{environment} -t {HI_CNN} -n {name}`\r\n\r\n", 'contents': "['CNN.py', 'CNN_EXTRA.py', 'HI_CNN.py', 'LICENSE', 'Logs', 'Logs_EXTRA', 'Logs_HI', 'README.md', 'Simulation', '__init__.py', '__pycache__', 'analyze.py', 'best_model', 'main.py', 'misc.py', 'pyastar', 'requirements.txt', 'subsystem_setup_part2.sh']", 'stars': 0, 'watchers': 0, 'forks': 0, 'deprepos': 0, 'deppacks': 0}