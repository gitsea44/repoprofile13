{'dependent': 'kerasrl', 'repo': '/marcgardent/basicia', 'language': 'Python', 'description': 'basicia is library to use Keras-RL in Armory3D', 'readme': '\r\n# basicia\r\n\r\nThis project provide a `WebSocket` communication between `Keras-RL` and `Armory3D`.\r\n\r\n## Installation\r\n\r\n### Your environment\r\n\r\n- Install Python 3.7\r\n- edit requirements.txt: \r\n  *  if you have Nvidia\'s GPU use `tensorflow-gpu`. But you have to install [install the SDK 10.0](https://developer.nvidia.com/cuda-10.0-download-archive)\r\n  * otherwise use `tensorflow` \r\n- install packages: `pip install -r requirements.txt`\r\n\r\n### your workspace\r\n\r\nQuick start with an example :\r\n- Clone this repository `git clone https://github.com/MarketGarden/basicia_examples`\r\n\r\nOR\r\n\r\n- Locate the `.blend` file you are working with\r\n- Create the `Libraries` folder alongside your `.blend` file\r\n- into `Libraries` folder Clone this repository using `git clone https://github.com/armory3d/basicia` \r\n- Restart Blender and load your `.blend`\r\n\r\n## Usage\r\n\r\nin order:\r\n\r\n1. start the server: your `python` script (see below: Â§Implement your Agent)\r\n2. start your `Armory3D` project with a `Javascript` target.\r\n\r\n![screenshot](Doc/run.gif)\r\n\r\n## Implement your Agent\r\nfork [runner_exemple.py](Backend/runner_exemple.py) and write your `MyEnv` and `main()` :\r\n\r\n```python\r\nfrom basicia.websocketenv import WebsocketEnv\r\nimport basicia.websocketserver \r\n\r\nclass MyEnv(WebsocketEnv):\r\n\r\n    action_space = <define action space>\r\n    observation_space = <define observation space>\r\n    reward_range = (0, 1) # <- set reward range\r\n     \r\ndef main(socket):\r\n    \r\n    # Get the environment and extract the number of actions.\r\n    env = MyEnv(socket) # <-- Build\r\n    \r\n    assert len(env.action_space.shape) == 1\r\n    nb_actions = env.action_space.shape[0]\r\n\r\n    # Build your model\r\n    model = [...]\r\n\r\n    # Build your agent\r\n    agent = [...]\r\n\r\n    # Train, Save, Test\r\n    agent.fit(env, nb_steps=50000, visualize=False, verbose=1, nb_max_episode_steps=200)\r\n    agent.save_weights(\'ddpg_my_weights.h5f\', overwrite=True)\r\n    agent.test(env, nb_episodes=5, visualize=True, nb_max_episode_steps=200)\r\n\r\n\r\nif __name__ == "__main__":\r\n    # start the service and wait the client \r\n    basicia.websocketserver.start(main)\r\n```\r\n\r\nsee also :\r\n * for instance [runner_example.py](Backend/runner_exemple.py)\r\n * [Keras-RL overview](https://keras-rl.readthedocs.io/en/latest/agents/overview/)\r\n * openai [Spaces : Box,Discrete ... ](https://github.com/openai/gym/tree/master/gym/spaces)\r\n        \r\n## Implement your Environment\r\n\r\n### Implement `basicia.definitions.IState` :\r\n\r\n```haxe\r\n\r\nimport basicia.definitions.IState;\r\n\r\nclass MyEnvState implements IState {\r\n\r\n    //observation: agent\'s observation of the current environment\r\n    public final observation :Array<Float>;\r\n\r\n    //reward: amount of reward returned after previous action\r\n    public final reward: Float;\r\n\r\n    //done: whether the episode has ended, in which case further step() calls will return undefined results\r\n    public final done :Bool; \r\n\r\n    // info: contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\r\n    public final info : Map<String, String>;\r\n    \r\n    public new(){\r\n        // set fields\r\n    }\r\n}\r\n```\r\n\r\n### extends `basicia.iron.WebSocketEnvTrait`\r\n\r\n> and attach the trait on an object or the scene!\r\n\r\n```haxe\r\npackage runner;\r\n\r\nimport kha.math.Vector3;\r\nimport iron.math.Vec4;\r\nimport armory.trait.physics.RigidBody;\r\nimport basicia.io.WebSocketClientImpl;\r\nimport basicia.definitions.IClient;\r\nimport basicia.definitions.IState;\r\n\r\nimport runner.MyEnvActions;\r\nimport runner.MyEnvState;\r\n\r\n#if arm_debug\r\nimport vdebug.VDebug;\r\n#end\r\n\r\nclass MyEnvTrait extends basicia.iron.WebSocketEnvTrait {\r\n\r\n    public function new() {\r\n        super();    \r\n    }\r\n \r\n    public override function step(commands:Array<Float>): IState {\r\n\r\n        // apply commands and return the state\r\n        var state = new MyEnvState(...);\r\n        return state;\r\n    }\r\n\r\n    public override function reset():IState {\r\n        // reset/init your environement and return the first state\r\n        var state = new MyEnvState(...);\r\n        return state;\r\n    }\r\n}\r\n```\r\n\r\nsee for details:\r\n* [Keras-RL Class ](https://github.com/keras-rl/keras-rl/blob/9ea37eb3ad0e51d071c56582f0afe89ceb1526d7/rl/core.py#L607)\r\n* [ OpenIA class](https://github.com/openai/gym/blob/c33cfd8b2cc8cac6c346bc2182cd568ef33b8821/gym/core.py#L8)\r\n\r\n \r\n', 'contents': "['.gitignore', '.gitmodules', 'Backend', 'Doc', 'README.md', 'Sources']", 'stars': 5, 'watchers': 5, 'forks': 1, 'deprepos': 0, 'deppacks': 0}