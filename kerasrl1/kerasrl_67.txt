{'dependent': 'kerasrl', 'repo': '/itsjafer/tv-show-recommendations', 'language': 'Python', 'description': 'Machine learning pipeline trained offline that, given a TV Show, recommends 10 similar TV Shows using cosine similarities based on a variety of features', 'readme': '# Recommendation Engine\n\n![](demo.GIF)\n\nUsing scraped data from Metacritic and IMDB, this model will take a TV Show as input and return 10 others that are recommended based on that show. Written in Python using mostly selectolax, scikit-learn, fuzzywuzzy, nltk, and pandas. \n\n## Model\n\nThe underlying model uses the following features (each weighted differently):\n\n* Genres\n* Plot\n* Synopsis\n* Cast\n* Production company\n* Keywords (describing the show)\n* Number of seasons\n* Episode runtime\n* IMDB Rating\n* Metacritic score\n* Metacritic user score\n\nUsing these, the model finds pairwise cosine_similarities between every TV Show in the database. Combining the top 30 most similar with a weighted average of IMDB and metacritic scores gives an overall recommendation score.\n\n## Demo\n\nYou can see a demo of prediction on my [website](http://itsjafer.com/#/show-predictor).\n\n## Limitations\n\nMetacritic scores are based on the first season (this is why metascores carry a lower weight). In the future, we need to scrape data for the entire show or the average of all seasons.\n\n## Setup\n\n`metacritic_scraper.py` must run before `imdb_scraper`. Following this, the training and predicting can be done.\n\nYou can either run the main file in a terminal or run this as a flask webserver using `flask_api`.\n\n\n', 'contents': "['.DS_Store', '.python-version', '.vscode', 'Procfile', 'README.md', '__pycache__', 'app.py', 'data', 'data_processor.py', 'demo.GIF', 'logging', 'requirements.txt', 'runtime.txt', 'scraping', 'tv_show_predictor_main.py', 'wsgi.py']", 'stars': 1, 'watchers': 1, 'forks': 0, 'deprepos': 0, 'deppacks': 0}