{'dependent': 'kerasrl', 'repo': '/KanazawaAIMeetup/TradePython', 'language': 'Jupyter Notebook', 'description': 'PythonでAIトレードを学ぶ\u3000資料 [金沢人工知能勉強会/PyData.Fukui 共同開催]', 'readme': '# PythonでAIトレードを学ぶ\u3000(ZOOM) 資料\nPythonでトレードをするAIを作ります。この会では、純粋に金融工学などで使われているアルゴリズムについて知見を深めることを目的にしています。\n\n# License\nMIT\n\n# 注意\nソースコードや資料は、引用している部分に関しては再配布はお控えいただきたいですが、主催者(tomoueno,KatsuyukiSaegusa)が作成した資料やコードについてはMITライセンスです。煮るなり焼くなり好きに使ってください。また、再配布をせずに利用する個人利用などの目的については、自由に改変して良いです。再配布可能なコードについては、冒頭に「再配布可能」と書くようにしますので、しばしお待ちを。\n\n## Install\nGitを使ったクローン方法\n```\ngit clone https://github.com/KanazawaAIMeetup/TradePython/\n```\nPython3.5.6を使用して、ライブラリをインストールする。\n```\npip install -r requirements.txt\n```\n\nRequirement already satisfied と表示されるが、import できない場合はこの記事(https://pod.hatenablog.com/entry/2019/04/10/130101)が参考になるかもしれません。\n\n（はじめてPythonをさわる方）\nAnacondaのPythonをインストール。3系の最新版をインストール。その後、Anaconda上での仮想環境を作成し、その環境にライブラリをインストールする。なお、仮想環境とは言うもののVM(Virtual Machine)とは全く関係ない。Anacondaは基本的に```pip install```と```conda install```を同じ環境内で併用してはいけないのが基本。ただし、matplotlibやopencvなど画面で表示する必要のあるライブラリは私の場合condaでインストールする場合が多い。(MacやWindowsの場合はpipでインストールしてもうまく動かない場合がある。)\n\n全て「y」や「yes」を選択。\n```\nconda create -n CriptoTrade python=3.5.6\nconda activate CriptoTrade\n(以下同様)\npip install -r requirements_gpu.txt\n```\n\n## ディレクトリの説明\n\n\n```\n.\n├── DATA\n│\xa0\xa0 ├── USDT_BTC_LATEST.csv\n│\xa0\xa0 ├── USDT_ETH_LATEST.csv\n│\xa0\xa0 ├── USDT_LTC_LATEST.csv\n│\xa0\xa0 └── USDT_XMR_LATEST.csv\n├── GetHistoricalData\n│\xa0\xa0 └── ResearchGetHistoryData.py\n├── LICENSE\n├── README.md\n├── requirements_gpu.txt\n├── TrainExample\n│\xa0\xa0 ├── ChainerRLExample\n│\xa0\xa0 │\xa0\xa0 ├── DDQNMultipleInput\n│\xa0\xa0 │\xa0\xa0 │\xa0\xa0 ├── main_dense.py\n│\xa0\xa0 │\xa0\xa0 │\xa0\xa0 ├── main_lstm.py\n│\xa0\xa0 │\xa0\xa0 │\xa0\xa0 ├── README.md\n│\xa0\xa0 │\xa0\xa0 │\xa0\xa0 └── requirements_chainerrl_gpu.txt\n│\xa0\xa0 │\xa0\xa0 ├── __init__.py\n│\xa0\xa0 │\xa0\xa0 └── __pycache__\n│\xa0\xa0 │\xa0\xa0     └── trade_class.cpython-35.pyc\n│\xa0\xa0 ├── ExampleGeneral\n│\xa0\xa0 │\xa0\xa0 └── keras_multiple_input.py\n│\xa0\xa0 ├── __init__.py\n│\xa0\xa0 ├── PredictPrice\n│\xa0\xa0 │\xa0\xa0 └── SimplePricePrediction\n│\xa0\xa0 │\xa0\xa0     ├── main_price_prediction.py\n│\xa0\xa0 │\xa0\xa0     └── README.md\n│\xa0\xa0 ├── __pycache__\n│\xa0\xa0 │\xa0\xa0 └── trade_class.cpython-35.pyc\n│\xa0\xa0 └── trade_class.py\n└── Trash\n    └── requirements_cpu_old.txt\n```\n- DATA/ 過去2年分程度の5分刻みの仮想通貨(BitCoin,Ethreum,LiteCoin,Monero)の価格データがあります。\n- GetHistoricalData/ ヒストリカルデータをpoloniexから取得するためのスクリプトがあります。\n- TrainExample/ tomouenoが学習に使用したサンプルのソースコードがあります。\n- TrainExample/trade_class.py 簡易的な取引のエミュレータがあります。手数料を加味して、単純に資産の増減を表示する程度ですが、αやβなどの指数を出す機能も今後は実装したいです。\n\n# 機能\ntrade_class.py \n### draw_trading_viw()\n![](https://i.imgur.com/FKaqrL6.png)\n取引の結果を可視化する。緑がBuyで赤がSell\n\n\n\n## 引用文献・参考文献\n- 「Poloniex - Crypto Asset Exchange」(https://poloniex.com/)\n- 「ChainerRL Visualizer」(https://github.com/chainer/chainerrl-visualizer)\n\n\n', 'contents': "['.gitignore', 'ColaboratoryCode', 'DATA', 'GetHistoricalData', 'Install_TA-Lib.sh', 'LICENSE', 'README.md', 'TrainExample', 'Trash', 'requirements_gpu.txt']", 'stars': 0, 'watchers': 0, 'forks': 2, 'deprepos': 0, 'deppacks': 0}