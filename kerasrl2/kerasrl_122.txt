{'dependent': 'kerasrl', 'repo': '/kasey-/ArduinoDQNCar', 'language': 'C++', 'description': 'My Arduino Deep Q-Learning Car Project', 'readme': '# ArduinoDQNCar\n\nYou will find here the code for a series of posts following up on running neural networks on an Arduino and pushing the concept furthermore by training first the neural network in a simulator then loading it to an Arduino and refining the training in vivo (my living room).\n\n## How to use it\n\n... to do ...\n\n## Sources & Acknowledgments\n\nThis project relies on the following ressources:\n\n * http://deeplizard.com/learn/video/nyjbcRQ-uQ8\n * https://github.com/keon/deep-q-learning\n * https://github.com/harvitronix/reinforcement-learning-car\n * https://www.youtube.com/playlist?list=PL1P11yPQAo7pH9SWZtWdmmLumbp_r19Hs \n * https://subscription.packtpub.com/book/big_data_and_business_intelligence/9781788834247\n\nAnd use:\n\n * https://github.com/viblo/pymunk\n * https://bitbucket.org/pyglet/pyglet/wiki/Home\n * https://github.com/keras-rl/keras-rl\n * https://github.com/openai/gym\n\n## Step 0: Ultrasonic Scanner\n\n3D printed servo-mount for ultrasonic sensor and code to drive it.\n\n## Step 1: Motor Speed PID Control\n\nI tried to control motor speed using a PID control. However, the mechanic is too wobbly to produce any quality output.\n\n## Step 2: Robot Simulator\n\nCreate a simulator where a simulated robot evolves\n\n## Step 3: Deep Reinforcement Learning\n\nUse the simulator and Keras-rl to train a neural network to drive the robot according to its environment.\n\n## Step 4: Training Over BLE\n\nExecute the training locally in the computer but use the real robot to take actions and observe result over Bluetooth.\n\n## Todo\n\n### Cleanup\n\n - [x] Write the readme description and add github tags to the project\n - [x] Add references to used source code and licence repository\n - [x] Organize folders (Python, Dataset, Tinn, Articles Steps, Pictures, etc...)\n - [x] Split python simulator for DQN code (moved into Gym env)\n\n### Get it working\n\n - [x] Fine tune hyper parameters\n - [x] Regularly save models\n - [ ] Implement training refinement in vivo\n - [ ] Write how to use it\n \n### Improvements\n\n - [x] Improve simulator\n - [x] Improve DQN algo (moved to Keras-rl with crazy built-in rl algo)\n - [ ] Implement relu for Genann\n', 'contents': "['.gitignore', 'LICENCE', 'README.md', 'Step-0-UltrasonicScanner', 'Step-1-MotorSpeedPIDControl', 'Step-2-Simulator', 'Step-3-DeepQLearning', 'Step-4-TrainingOverBLE', 'Step-5-TrainingOverBLE-v2']", 'stars': 0, 'watchers': 0, 'forks': 0, 'deprepos': 0, 'deppacks': 0}