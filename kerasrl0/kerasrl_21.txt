{'dependent': 'kerasrl', 'repo': '/miroblog/deep_rl_trader', 'language': 'Python', 'description': 'Trading Environment(OpenAI Gym) + DDQN (Keras-RL)', 'readme': '# Deep RL Trader (Duel DQN) Implemented using Keras-RL\n\nThis repo contains \n1. Trading environment(OpenAI Gym) for trading crypto currency  \n2. Duel Deep Q Network  \nAgent is implemented using `keras-rl`(https://github.com/keras-rl/keras-rl)     \n  \nAgent is expected to learn useful action sequences to maximize profit in a given environment.  \nEnvironment limits agent to either buy, sell, hold stock(coin) at each step.  \nIf an agent decides to take a   \n* LONG position it will initiate sequence of action such as `buy- hold- hold- sell`    \n* for a SHORT position vice versa (e.g.) `sell - hold -hold -buy`.    \n\nOnly a single position can be opened per trade. \n* Thus invalid action sequence like `buy - buy` will be considered `buy- hold`.   \n* Default transaction fee is : 0.0005  \n\nReward is given\n* when the position is closed or\n* an episode is finished.   \n  \nThis type of sparse reward granting scheme takes longer to train but is most successful at learning long term dependencies.  \n\nAgent decides optimal action by observing its environment.  \n* Trading environment will emit features derived from ohlcv-candles(the window size can be configured). \n* Thus, input given to the agent is of the shape `(window_size, n_features)`.  \n\nWith some modification it can easily be applied to stocks, futures or foregin exchange as well.\n\n[Visualization](https://github.com/miroblog/deep_rl_trader/blob/master/visualize.ipynb) / [Main](https://github.com/miroblog/deep_rl_trader/blob/master/ddqn_rl_trader.py) / [Environment](https://github.com/miroblog/deep_rl_trader/blob/master/TraderEnv.py)\n\nSample data provided is 5min ohlcv candle fetched from bitmex.\n* train : `\'./data/train/` 70000\n* test : `\'./data/train/` 16000\n\n### Prerequisites\n\nkeras-rl, numpy, tensorflow ... etc\n\n```python\npip install -r requirements.txt\n\n# change "keras-rl/core.py" to "./modified/core.py"\n\n```\n\n## Getting Started \n\n### Create Environment & Agent\n```python\n# create environment\n# OPTIONS\nENV_NAME = \'OHLCV-v0\'\nTIME_STEP = 30\nPATH_TRAIN = "./data/train/"\nPATH_TEST = "./data/test/"\nenv = OhlcvEnv(TIME_STEP, path=PATH_TRAIN)\nenv_test = OhlcvEnv(TIME_STEP, path=PATH_TEST)\n\n# random seed\nnp.random.seed(123)\nenv.seed(123)\n\n# create_model\nnb_actions = env.action_space.n\nmodel = create_model(shape=env.shape, nb_actions=nb_actions)\nprint(model.summary())\n\n\n# create memory\nmemory = SequentialMemory(limit=50000, window_length=TIME_STEP)\n\n# create policy\npolicy = EpsGreedyQPolicy()# policy = BoltzmannQPolicy()\n\n# create agent\n# you can specify the dueling_type to one of {\'avg\',\'max\',\'naive\'}\ndqn = DQNAgent(model=model, nb_actions=nb_actions, memory=memory, nb_steps_warmup=200,\n               enable_dueling_network=True, dueling_type=\'avg\', target_model_update=1e-2, policy=policy,\n               processor=NormalizerProcessor())\ndqn.compile(Adam(lr=1e-3), metrics=[\'mae\'])\n```\n\n### Train and Validate\n```python\n# now train and test agent\nwhile True:\n    # train\n    dqn.fit(env, nb_steps=5500, nb_max_episode_steps=10000, visualize=False, verbose=2)\n    try:\n        # validate\n        info = dqn.test(env_test, nb_episodes=1, visualize=False)\n        n_long, n_short, total_reward, portfolio = info[\'n_trades\'][\'long\'], info[\'n_trades\'][\'short\'], info[\n            \'total_reward\'], int(info[\'portfolio\'])\n        np.array([info]).dump(\n            \'./info/duel_dqn_{0}_weights_{1}LS_{2}_{3}_{4}.info\'.format(ENV_NAME, portfolio, n_long, n_short,\n                                                                        total_reward))\n        dqn.save_weights(\n            \'./model/duel_dqn_{0}_weights_{1}LS_{2}_{3}_{4}.h5f\'.format(ENV_NAME, portfolio, n_long, n_short,\n                                                                        total_reward),\n            overwrite=True)\n    except KeyboardInterrupt:\n        continue\n\n```\n\n### Configuring Agent\n```python\n## simply plug in any keras model :)\ndef create_model(shape, nb_actions):\n    model = Sequential()\n    model.add(CuDNNLSTM(64, input_shape=shape, return_sequences=True))\n    model.add(CuDNNLSTM(64))\n    model.add(Dense(32))\n    model.add(Activation(\'relu\'))\n    model.add(Dense(nb_actions, activation=\'linear\'))\n```\n\n### Running \n[Verbose] While training or testing, \n* environment will print out (current_tick , # Long, # Short, Portfolio)\n  \n[Portfolio]  \n* initial portfolio starts with 100*10000(krw-won)     \n* reflects change in portfolio value if the agent had invested 100% of its balance every time it opened a position.       \n  \n[Reward] \n* simply pct earning per trade.    \n\n### Inital Result\n\n#### Trade History : Buy (green) Sell (red)\n![trade](https://github.com/miroblog/deep_rl_trader/blob/master/png/full_trade_history.png)  \n![partial_trade](https://github.com/miroblog/deep_rl_trader/blob/master/png/partial_trade_history.png)\n#### Cumulative Return, Max Drawdown Period (red)\n![cum_return](https://github.com/miroblog/deep_rl_trader/blob/master/png/cum_return.png)\n\n* total cumulative return :[0] -> [3.670099054203348]  \n* portfolio value [1000000] -> [29415305.46593453]  \n\nWow ! 29 fold return, 3.67 reward !   \n! Disclaimer : if may have overfitted :(\n\n## Authors\n\n* **Lee Hankyol** - *Initial work* - [deep_rl_trader](https://github.com/miroblog/deep_rl_trader)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n', 'contents': "['.gitattributes', '.idea', '.ipynb_checkpoints', 'Readme.md', 'TraderEnv.py', '__pycache__', 'data', 'ddqn_rl_trader.py', 'info', 'load_test.py', 'model', 'modified_keras_rl_core', 'png', 'process_data.py', 'requirements.txt', 'ta.py', 'util.py', 'visualize.ipynb', 'visualize_trade.py']", 'stars': 108, 'watchers': 108, 'forks': 45, 'deprepos': 'zero', 'deppacks': 'zero'}