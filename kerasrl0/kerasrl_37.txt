{'dependent': 'kerasrl', 'repo': '/Maxwell1447/Reinforcement-learning-to-play-Snake', 'language': 'Python', 'description': None, 'readme': '# Comparing different techniques of Machine Learning to play Snake\n\n![](res/v7.gif)\n\n## How to run locally\n\nClone the repository in a folder\n\n```\ngit clone https://github.com/Maxwell1447/Reinforcement-learning-to-play-Snake.git\n```\n\n***Warning***: You have to use a version of python up to 3.7. Python 3.8 or more is incompatible with this code!\n\nIf you are using Windows, make sure python and its Script folder are referenced in you environnement variables. More info on [this page](https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/).\n\nRun this command in a terminal in the cloned repository to create the virtual environnement (note that you must use the command prompt in Windows):\n\n```\nvirtualenv venv\n```\n\nActivate it on Windows by running this command then:\n\n```\nvenv\\Scripts\\activate\n```\n\nFor Linux/Mac OS, this is this command instead:\n\n```\nsource venv/bin/activate\n```\n\nDon\'t forget that when you\'re done, you have to unactivate it:\n\n```\ndeactivate\n```\n\nAll the following commands are to be run in this virtual env.\n\nInstall requirements (make sure that pip is upgraded to version 19 or higher)\n\n```\npip install -r requirements.txt\n```\n\n***\n\n### Run supervised methods\n\nYou can either run and test different models on already-built datasets, or you can create your own dataset.\n\n#### Generate a new dataset\n\n```\npython supervised_classification.py --mode feed --episode <Number of games> --grid <size of the grid> --path_finder <greedy || a_star>\n```\nNote that the grid is square. The pathfinder corresponds to the deterministic algorithm chosen to show the example and feed the data.\nIn the ```data``` folder, a ```.csv``` file should have been created with the following name format ```data_<pathfinder>_<grid size>.csv```\n\nYou can keep on feeding the same data set with the same command. You can freely change the number of episodes then.\n\n#### Fit a model to an existing dataset\n\nRun the following command in a terminal:\n```\npython supervised_classification.py --mode train-test --grid <size of the grid> --path_finder <greedy || a_star> [--poly_features] [--predict_and_test] [--all_data] --clf <model> [--n_neighbor <kNN tolerance>]\n```\nThis will access the dataset file with the corresponding pathfinder and grid size.\n\n+ ```--poly_feature``` create polynomial features for all features to the second order\n\n+ ```--predict_and_test``` gives the accuracy on the training set\n\n+ ```--all_data``` allows to take into account the tail of the snake. Otherwise, there are only info about the head, the apple and the current direction. You will note that not considering the tail provides better results most of the time.\n\n\nThere is a bunch of models that are proposed by *Scikit Learn*. Here is a list of the classifiers you can use\n\n+ **Logistic regression**\n\nuse ```--clf logreg```\n\n+ **SVM**\n\nuse ```--clf SVM```\n\n+ **SVM with RBF kernel**\n\nuse ```--clf Nusvm```\n\n+ **k-Nearest Neighbors**\n\nuse ```--clf kNN [--nb_parameter <Number of allowed neighbors>]```\n\n+ **MLP**\n\nuse ```--clf MLP [--nb_parameter <Number of layers>]```\n\n+ **One vs Rest with SVM + kernel**\n\nuse ```--clf multiclass```\n\n+ **Random Forest**\n\nuse ```--clf Forest [--nb_parameter <Number of trees in the forest>]```\n\n***\n\n### Run Deep Q Reinforcement learning\n\nThere are already trained networks that you can test, but you can also run the training of a given network model\n\n#### Train a model\n\nRun the following command in a terminal:\n```\npython snake_train_test.py --mode train --version <model version> [--retrain <training number>] --step <number of step> [--initial_eps <eps value>] [--weights <file name>]\n```\n+ The model versions are ```v1``` ```v2``` ```v3``` ```v4``` ```v5``` ```v6``` ```v7``` ```v8```. You can [add a custom version model](#custom) if you wish.\n\n+ You have the possiblility to train again the same model. This is with ```--retrain```. You have to increment the training number every time you want to retrain a given model. Every trained version is saved in ```data\\``` with  a name in the format: ```dqn_snake_weights_<model version>_<training number>.hf5```\n\nBy defalut the training number is set to -1 so that the first file generated is number 0, so don\'t indicate the training number the first time you train a model. Then you can specify the trained version you want to retrain, checking if there is a corresponding ```.hf5``` folder in ```data\\```.\n\n**Be carful** if the training number has no corresponding file, it will nonetheless train but with new random weights.\n\n+ ```--weights <file name>``` allows to use custom file names to train with. But after the training, a new file will be created according to the training number!\n\n+ ```--step <number of steps>``` corresponds to the number of steps for the training (and not the number of games!). Generally you will need millions of steps to have results. It can take several hours, so be patient :)\n\n+ ```--initial_eps <eps value>``` is the exploration parameter at the beginning of the training. It will linearly deacrease down to ```0.01``` after 2,000,000 steps. Set it to 1 at the first training, and then decrease it to around ```0.3```\n\n#### Add a costum model <a name="custom"></a>\n\nOpen and edit the file use ```dqn\\models.py```\n\nCreate a new function and fill it, given the other models as templates.\n```python\ndef model_custom(input_shape, nb_actions): # you can choose any other name\n  ...\n```\n\nthen edit the ```model``` function by adding:\n```python\nelif version == "custom_name": # choose the name you want\n  return model_custom(input_shape, nb_actions)\n```\n\nNow you just have to call ```--version custom_name``` to use this model.\n\n#### Test a model\n\nRun the following command in a terminal:\n```\npython snake_train_test.py --mode test --version <model version> [--retrain <training number>] [--weights <file name>] --episodes <number of games>\n```\n\n+ Use a version and a training number corresponding to an existing .hf5 file.\n\n+ With ```--weights <file name>``` you can use a custom file name for testing. But make sure it is corresponding to the right model version!\n\n+ ```--episodes <number of games>``` corresponds to the number of games that will be played.\n\n#### Make statistics on a trained model\n\nEvery time a model is (re)trained, a ```dqn_snake_log_<model version>_<training number>.json``` is created, containing data of each training episode: \n\n```loss```, ```mae```, ```mean_q_value```, ```mean_eps_value```, ```episode_reward```, ```nb_episode_steps```,  ```nb_steps```,  ```episode_number```, ```duration```\n\nTo visualize these pieces of information, run the following command in a terminal:\n```\npython snake_train_test.py --mode stats --version <model version> --display <data>\n```\n\n+ ```--display``` has the default value of ```episode_reward```\n\n***\n\n', 'contents': "['.gitignore', 'README.md', 'atari_test.py', 'data', 'dqn', 'env', 'requirements.txt', 'res', 'snake.py', 'snake_train_test.py', 'stats.py', 'supervised', 'supervised_classification.py', 'supervised_results.txt', 'utils.py']", 'stars': 1, 'watchers': 1, 'forks': 1, 'deprepos': 0, 'deppacks': 0}