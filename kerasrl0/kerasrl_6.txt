{'dependent': 'kerasrl', 'repo': '/starsmall-xiaoqq/docker-rl-gym', 'language': 'Dockerfile', 'description': None, 'readme': "# Docker - RL & OpenAI Gym\n\n## Description:\nA Docker environment for reinforcement learning in Python 3 including the OpenAI Gym toolkit\t\n\nIncludes: \n\n**1. Basics:** [NumPy](http://www.numpy.org/), [Pandas](http://pandas.pydata.org/), [Scipy](https://www.scipy.org/), [Jupyter](http://jupyter.org/), [Matplotlib](http://matplotlib.org/)\n\n**2. Deep Learning:** [TensorFlow](https://www.tensorflow.org/), [Keras](http://keras.io/)\n\n**3. Reinforcement Learning:**[Keras-RL](https://keras-rl.readthedocs.io/en/latest/), [baselines](https://github.com/openai/baselines), [TensorForce](https://github.com/reinforceio/tensorforce)\n\n**4. Environments:**[AI Gym](https://github.com/openai/gym)\n\n**5. Others:** [ipywidgets](https://ipywidgets.readthedocs.io/en/stable/index.html), [h5py](http://www.h5py.org/)\n\n\n## Rendering on Jupyter notebook\n\nThe virtual frame buffer allows the video from the gym environments to be rendered on jupyter notebooks. \nSimple example with Breakout:\n```\nimport gym\nfrom IPython import display\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nenv = gym.make('Breakout-v0')\nenv.reset()\nfor _ in range(1000):\n    plt.imshow(env.render(mode='rgb_array'))\n    display.clear_output(wait=True)\n    display.display(plt.gcf())\n    env.step(env.action_space.sample())\n```\n\n", 'contents': "['Dockerfile', 'README.md', 'requirements_1.txt', 'requirements_2.txt']", 'stars': 0, 'watchers': 0, 'forks': 0, 'deprepos': 0, 'deppacks': 0}